#!/bin/bash

# =============================================================================
# Script: parts/01_ask_project_informations.sh
# G√©n√©rateur de projet Fullstack TypeScript - Collecte des informations
# Seb-Prod 2025
# 
# Description:
#   Collecte de mani√®re interactive les informations n√©cessaires √† la cr√©ation
#   d'un projet fullstack TypeScript :
#   - Nom du projet (avec validation de format et unicit√©)
#   - Port du serveur frontend (avec v√©rification de disponibilit√©)
#   - Port du serveur backend (avec v√©rification de disponibilit√© et unicit√©)
# 
# Variables export√©es:
#   PROJECT_NAME   - Nom du projet valid√©
#   FRONTEND_PORT  - Port du serveur frontend disponible
#   BACKEND_PORT   - Port du serveur backend disponible (diff√©rent du frontend)
# 
# D√©pendances:
#   - lsof (pour v√©rifier la disponibilit√© des ports)
#   - Fonctions utilitaires : print_*, prompt_*, clear_lines
# 
# Variables d'environnement:
#   DEBUG - Si d√©fini √† "1", affiche les variables export√©es
# =============================================================================

# =============================================================================
# CONSTANTES DE VALIDATION
# =============================================================================

readonly MIN_PORT=1024              # Port minimum autoris√© (√©vite les ports syst√®me)
readonly MAX_PORT=65535             # Port maximum autoris√©
readonly MIN_PROJECT_NAME_LENGTH=3  # Longueur minimale du nom de projet
readonly MAX_VALIDATION_ATTEMPTS=3  # Nombre maximum de tentatives par champ

# =============================================================================
# FONCTIONS DE VALIDATION
# Valident les entr√©es utilisateur selon des crit√®res stricts
# =============================================================================

# Valide le nom du projet
# - Doit commencer par une lettre
# - Contenir uniquement lettres, chiffres, tirets et underscores
# - Avoir au moins 3 caract√®res
# - Ne pas correspondre √† un dossier existant
#
# Arguments:
#   $1 - Nom du projet √† valider
# Returns:
#   0 si valide, 1 si invalide
validate_project_name() {
    local name="$1"
    
    # V√©rification du format : doit commencer par une lettre, 3+ caract√®res
    if ! [[ "$name" =~ ^[a-zA-Z][a-zA-Z0-9_-]{2,}$ ]]; then
        return 1
    fi
    
    # V√©rification que le dossier n'existe pas d√©j√†
    if [[ -d "$name" ]]; then
        return 1
    fi
    
    return 0
}

# Valide un num√©ro de port
# - Doit √™tre un nombre entier
# - Dans la plage 1024-65535
# - Ne pas √™tre d√©j√† utilis√© par un autre processus
#
# Arguments:
#   $1 - Num√©ro de port √† valider
# Returns:
#   0 si valide, 1 si invalide
validate_port() {
    local port="$1"
    
    # V√©rification que c'est un nombre
    if ! [[ "$port" =~ ^[0-9]+$ ]]; then
        return 1
    fi
    
    # V√©rification de la plage de ports autoris√©e
    if (( port < MIN_PORT || port > MAX_PORT )); then
        return 1
    fi
    
    # V√©rification que le port n'est pas d√©j√† utilis√©
    if lsof -i ":$port" >/dev/null 2>&1; then
        return 1
    fi
    
    return 0
}

# Valide que deux ports sont diff√©rents
#
# Arguments:
#   $1 - Premier port
#   $2 - Deuxi√®me port
# Returns:
#   0 si diff√©rents, 1 si identiques
validate_different_ports() {
    [[ "$1" != "$2" ]]
}

# =============================================================================
# FONCTIONS D'AFFICHAGE ET INTERFACE UTILISATEUR
# =============================================================================

# Affiche un r√©capitulatif du projet configur√©
# Utilise les variables globales PROJECT_NAME, FRONTEND_PORT, BACKEND_PORT
show_project_summary() {
    clear_lines 5
    print_plain "$GREEN" "üìã R√©capitulatif du projet :"
    print_plain "$BLUE" "   üìÅ Nom      : $PROJECT_NAME"
    print_plain "$BLUE" "   üåê Frontend : http://localhost:$FRONTEND_PORT"
    print_plain "$BLUE" "   ‚öôÔ∏è  Backend  : http://localhost:$BACKEND_PORT"
    echo ""
}

# Affiche les conseils de validation pour guider l'utilisateur
show_validation_tips() {
    print_tips "Conseils de saisie :"
    print_plain "$YELLOW" "   ‚Ä¢ Nom du projet : doit commencer par une lettre (${MIN_PROJECT_NAME_LENGTH}+ caract√®res)"
    print_plain "$YELLOW" "   ‚Ä¢ Ports : doivent √™tre entre $MIN_PORT et $MAX_PORT"
    print_plain "$YELLOW" "   ‚Ä¢ V√©rifiez que les ports ne sont pas d√©j√† utilis√©s"
    print_plain "$YELLOW" "   ‚Ä¢ Les deux ports doivent √™tre diff√©rents"
    echo ""
}

# Affiche des exemples de noms de projet valides
show_project_name_examples() {
    print_info "Exemples de noms valides :"
    print_plain "$CYAN" "   ‚Ä¢ mon-app-web, MyProject, todo-app-v2"
    echo ""
}

# Affiche des suggestions de ports couramment utilis√©s
show_port_suggestions() {
    local port_type="$1"  # "frontend" ou "backend"
    
    case "$port_type" in
        "frontend")
            print_info "Ports frontend courants : 3000, 3001, 8080, 8081"
            ;;
        "backend")
            print_info "Ports backend courants : 5000, 8000, 3001, 4000"
            ;;
    esac
    echo ""
}

# =============================================================================
# COLLECTE DES INFORMATIONS UTILISATEUR
# Processus interactif de saisie avec validation en temps r√©el
# =============================================================================

# Collecte toutes les informations n√©cessaires au projet
# D√©finit les variables globales : PROJECT_NAME, FRONTEND_PORT, BACKEND_PORT
collect_project_info() {
    local attempts=0
    
    show_validation_tips
    
    # === COLLECTE DU NOM DU PROJET ===
    show_project_name_examples
    
    while true; do
        prompt_input "üí° Nom du projet" "mon-projet-fullstack" validate_project_name \
                    "‚ùå Nom invalide ou dossier existant" $MAX_VALIDATION_ATTEMPTS
        PROJECT_NAME="$PROMPT_RESULT"
        
        if validate_project_name "$PROJECT_NAME"; then
            clear_lines 3
            print_success "Nom du projet valid√© : $PROJECT_NAME"
            echo ""
            break
        fi
        
        # Si on arrive ici, c'est que la validation a √©chou√©
        show_project_name_examples
    done
    
    # === COLLECTE DU PORT FRONTEND ===
    show_port_suggestions "frontend"
    
    while true; do
        prompt_input "üåê Port pour le frontend" "3000" validate_port \
                    "‚ùå Port invalide ou d√©j√† utilis√© (plage: $MIN_PORT-$MAX_PORT)" $MAX_VALIDATION_ATTEMPTS
        FRONTEND_PORT="$PROMPT_RESULT"
        
        if validate_port "$FRONTEND_PORT"; then
            clear_lines 3
            print_success "Port frontend valid√© : $FRONTEND_PORT"
            echo ""
            break
        fi
        
        # R√©afficher les suggestions en cas d'√©chec
        show_port_suggestions "frontend"
    done
    
    # === COLLECTE DU PORT BACKEND ===
    show_port_suggestions "backend"
    
    while true; do
        prompt_input "‚öôÔ∏è  Port pour le backend" "5000" validate_port \
                    "‚ùå Port invalide ou d√©j√† utilis√©"
        BACKEND_PORT="$PROMPT_RESULT"
        
        # Validation du format et disponibilit√© du port
        if ! validate_port "$BACKEND_PORT"; then
            clear_lines 3
            show_port_suggestions "backend"
            continue
        fi
        
        # Validation que les ports sont diff√©rents
        if ! validate_different_ports "$FRONTEND_PORT" "$BACKEND_PORT"; then
            print_error "Le port backend doit √™tre diff√©rent du port frontend ($FRONTEND_PORT)"
            clear_lines 4 1.5
            show_port_suggestions "backend"
            continue
        fi
        clear_lines 3
        print_success "Port backend valid√© : $BACKEND_PORT"
        echo ""
        break
    done
}

# =============================================================================
# CONFIRMATION ET EXPORT DES VARIABLES
# =============================================================================

# Affiche le r√©capitulatif final et demande confirmation
# Exporte les variables pour les scripts suivants
confirm_and_export() {
    print_section_header "üìã Confirmation de la configuration"
    show_project_summary
    
    # Export des variables pour les autres scripts
    export PROJECT_NAME
    export FRONTEND_PORT  
    export BACKEND_PORT
    
    # Demande de confirmation finale
    prompt_continue "üöÄ Voulez-vous lancer la cr√©ation du projet avec cette configuration ?"
    
    print_success "üöÄ Configuration valid√©e ! D√©marrage de la cr√©ation du projet..."
    clear_lines 3
}

# =============================================================================
# FONCTIONS DE DEBUG ET DIAGNOSTIC
# =============================================================================

# Affiche les variables export√©es si le mode debug est activ√©
show_debug_info() {
    if [[ "${DEBUG:-}" == "1" ]]; then
        print_section_header "üîç Informations de debug"
        print_info "Variables export√©es :"
        print_info "  PROJECT_NAME='$PROJECT_NAME'"
        print_info "  FRONTEND_PORT='$FRONTEND_PORT'"
        print_info "  BACKEND_PORT='$BACKEND_PORT'"
        print_info "  Working directory: $(pwd)"
        echo ""
    fi
}

# V√©rifie les pr√©requis syst√®me n√©cessaires
check_prerequisites() {
    local missing_deps=()
    
    # V√©rification de lsof pour la validation des ports
    if ! command -v lsof >/dev/null 2>&1; then
        missing_deps+=("lsof")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        print_warning "‚ö†Ô∏è  D√©pendances manquantes d√©tect√©es :"
        for dep in "${missing_deps[@]}"; do
            print_plain "$YELLOW" "   ‚Ä¢ $dep"
        done
        print_info "La validation des ports pourrait √™tre impr√©cise."
        echo ""
    fi
}

# =============================================================================
# FONCTION PRINCIPALE
# Orchestre le processus complet de collecte d'informations
# =============================================================================

main() {
    # V√©rification des pr√©requis
    check_prerequisites
    
    # Collecte interactive des informations
    collect_project_info
    
    # Confirmation et export des variables
    confirm_and_export
    
    # Affichage des informations de debug si activ√©
    show_debug_info
}

# =============================================================================
# POINT D'ENTR√âE
# =============================================================================

# Ex√©cution de la fonction principale avec tous les arguments
main "$@"